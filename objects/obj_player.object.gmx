<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize variables
grav = 0.6;
hsp = 0;
vsp = 0;
jumpspeed = 6;
movespeed = 5;
jump_started = 0;
jump_frames = 0;
jump_double = 0;
gpad = 0;
grav_sw = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//check das Eingabegerät
if (keyboard_check(vk_anykey) == 1)
    {gpad = 0;}
if (gamepad_button_check(0, gp_padr) == 1 || gamepad_button_check(0, gp_padl) == 1 || gamepad_button_check(0, gp_face1) == 1)
    {gpad = 1;}




//checkt nach input
    if (gpad == 0) //keyboard ist aktiv
{
    key_right = keyboard_check(vk_right);
    key_left = -keyboard_check(vk_left);
    key_jump = keyboard_check_pressed(vk_space);
    key_jump_released = keyboard_check_released(vk_space);
} 

if (gpad == 1) //gamepad ist aktiv
{
    key_right = gamepad_button_check(0, gp_padr);
    key_left = -gamepad_button_check(0, gp_padl);
    key_jump = gamepad_button_check_pressed(0, gp_face1);
    key_jump_released = gamepad_button_check_released(0, gp_face1);
}

///reagiert auf input
//horizontale Bewegung
move_direction = key_left + key_right; //legt die richtung fest
hsp += move_direction * (0.45); //beschleunigt in angegebene Richtung 
if (abs(hsp) &gt;= movespeed)  // begrenzt höchstgeschwindigkeit auf "movespeed"
        {hsp = sign(hsp) * movespeed;}
    
if (move_direction == 0) //bremst ab ohne input
    {
        if (abs(hsp) &gt;= 0 &amp;&amp; abs(hsp) &lt;= 0.5)
                {hsp = 0;} //verhindert verhindert kleine restgeschwindigkeiten
        else
                {hsp -= sign(hsp) * 0.40;} //verringert geschwindigkeit
    }
///vertikale Bewegung
if (vsp &lt; 7) //aktiviert die Gravitation
    {vsp += grav;}
        
//Sprungtaste gedrückt
if (place_meeting(x,y+1, obj_wall))
        { 
            if (key_jump == 1) //aktiviert sprung auf tastendruck, 
                              //wenn nicht in aktivem Sprung
            {
                vsp = -jumpspeed;     //setzt Initial-Sprunggeschwindigkeit
                jump_started = 1;     //setzt aktiven Sprung
                jump_double = 0;
                jump_frames = 0;     //resetet den framecounter für variable Sprunghöhe
            }
        }
        
//Sprungtaste gehalten
if (jump_started = 1 &amp;&amp; jump_frames &lt;= 20) //zählt die frames in, der der Sprung verlängert werden kann
    {
            vsp -= 0.45;
            jump_frames += 1;
    }

//Sprungtaste losgelassen
if (key_jump_released = 1 &amp;&amp; jump_started = 1 || jump_frames == 20)  //beendet sprung wenn taste losgelassen oder 25 frames vorbei
    {
        jump_started = 0;
        key_jump_released = 0;
        if (sign(vsp) == -1 &amp;&amp; jump_frames &lt; 20)
            {vsp += 0.5;}  
    }
    
//Wandsprung
if (place_meeting(x+4,y,obj_wall) &amp;&amp; !place_meeting(x,y+15,obj_wall) &amp;&amp; move_direction == -1 &amp;&amp; key_jump == 1)
         {
            vsp = -jumpspeed;     //setzt Initial-Sprunggeschwindigkeit
            hsp = -movespeed/2;
            jump_started = 1;     //setzt aktiven Sprung
            jump_frames = 0;     //resetet den framecounter für variable Sprunghöhe
         }
         
if (place_meeting(x-4,y,obj_wall) &amp;&amp; !place_meeting(x,y+15,obj_wall) &amp;&amp; move_direction == 1 &amp;&amp; key_jump == 1)
         {
            vsp = -jumpspeed;     //setzt Initial-Sprunggeschwindigkeit
            hsp = movespeed/2;
            jump_started = 1;     //setzt aktiven Sprung
            jump_frames = 0;     //resetet den framecounter für variable Sprunghöhe
         }
         
//Doppelsprung

if (!place_meeting(x,y+1, obj_wall) &amp;&amp; jump_double == 0 &amp;&amp; key_jump == 1)
                 //wenn nicht in aktivem Sprung
            {
                vsp = -jumpspeed;     //setzt Initial-Sprunggeschwindigkeit
                jump_started = 1;     //setzt aktiven Sprung
                jump_double = 1;
                jump_frames = 0;     //resetet den framecounter für variable Sprunghöhe
            }

// horizontal collision
    if (place_meeting(x+hsp,y,obj_wall))
    {
        while(!place_meeting(x+sign(hsp),y,obj_wall))  
        {
            x +=sign(hsp);
        }
        hsp = 0;  
    }
    
// vertical collision
    if (place_meeting(x,y+vsp,obj_wall))
    {
        while(!place_meeting(x,y+sign(vsp),obj_wall))  
        {
            y +=sign(vsp);
        }
        vsp = 0;  
    }
    
//bewegung ausführen    
    x += hsp;
    y += vsp;

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
